pub fun input(prompt: Text): Text {
    unsafe $printf "\${nameof prompt}"$
    unsafe $read$
    return "$REPLY"
}

pub fun dir_exist(path) {
    $[ -d "{path}" ]$ failed {
        return false
    }
    return true
}

pub fun file_exist(path) {
    $[ -f "{path}" ]$ failed {
        return false
    }
    return true
}

pub fun file_read(path) {
    return $cat "{path}"$?
}

pub fun file_write(path, content) {
    return $echo "{content}" > "{path}"$?
}

pub fun file_append(path, content) {
    return $echo "{content}" >> "{path}"$?
}

pub fun lines(text: Text): [Text] {
    let result = [Text]
    unsafe $IFS=\$'\n' read -rd '' -a {nameof result} <<<"\${nameof text}"$
    return result
}

#[allow_absurd_cast]
pub fun len(value): Num {
    unsafe {
        if value is Text:
            return $echo "\$\{#{nameof value}}"$ as Num
        else:
            return $echo "\$\{#{nameof value}[@]}"$ as Num
    }
}

#[allow_absurd_cast]
pub fun sum(list: [Num]): Num {
    return unsafe $echo "{list}" | awk '\{s=0; for (i=1; i<=NF; i++) s+=\$i; print s}'$ as Num
}

pub fun has_failed(command: Text): Bool {
    unsafe silent $eval {command}$
    return status != 0
}

pub fun exit(code: Num): Null {
    unsafe $exit "{code}"$
}

pub fun includes(arr, value) {
    loop v in arr {
        if v == value {
            return true
        }
    }
    return false
}
