import * from "std/fs"
import * from "std/text"

pub fun get_env_var(var: Text, file: Text = ".env"): Text {
    let _var = unsafe $echo "\$\{!var}"$
    if _var != "" {
        return _var
    }

    if file_exist(".env") {
        unsafe $source "{file}"$
        return unsafe $echo "\$\{!var}"$
    }

    return ""
}

pub fun load_env_file(file: Text = ".env"): Null {
    unsafe $export "\$(xargs < {file})" > /dev/null$
}

pub fun shell_isset(name: Text): Bool {
    $[[ ! -z \$\{!{nameof name}+z} ]]$ failed {
        return false
    }
    return true
}

pub fun shell_constant_set(name: Text, val: Text): Null {
    $readonly \${nameof name}="\${nameof val}" 2> /dev/null$?
}

pub fun shell_constant_get(name: Text): Text {
    return $echo \$\{!{nameof name}}$?
}

pub fun shell_var_set(name: Text, val: Text): Null {
    $export \${nameof name}="\${nameof val}" 2> /dev/null$?
}

pub fun shell_var_get(name: Text): Text {
    return $echo \$\{!{nameof name}}$?
}

pub fun shell_unset(name: Text): Null {
    $unset {name}$?
}

pub fun is_command(command: Text): Bool {
    $[ -x "\$(command -v {command})" ]$ failed {
        return false
    }
    return true
}

pub fun input(prompt: Text): Text {
    unsafe $printf "\${nameof prompt}"$
    unsafe $read$
    return "\$REPLY"
}

pub fun has_failed(command: Text): Bool {
    unsafe silent $eval {command}$
    return status != 0
}

pub fun exit(code: Num): Null {
    unsafe $exit "{code}"$
}

pub fun is_root(): Bool {
    if unsafe $id -u$ == "0" {
        return true
    }

    return false
}

pub fun printf(format: Text, args: [Text] = [""]): Null {
    unsafe ${nameof args}=("{format}" "\$\{{nameof args}[@]}")$
    unsafe $printf "\$\{{nameof args}[@]}"$
}

pub fun printf_escape(text: Text): Text {
    return unsafe $echo \${nameof text} | sed -e 's/\\\\/\\\\\\\\/g' -e "s/%/%%/g"$
}

pub fun text_shell(message: Text, style: Num, fg: Num, bg: Num): Text {
    return "\033[{style};{fg};{bg}m{printf_escape(message)}\033[0m"
}

pub fun text_bold(message: Text): Text {
    return "\e[1m{printf_escape(message)}\e[0m"
}

pub fun text_italic(message: Text): Text {
    return "\e[3m{printf_escape(message)}\e[0m"
}

pub fun text_underlined(message: Text): Text {
    return "\e[4m{printf_escape(message)}\e[0m"
}

pub fun color_echo(message: Text, color: Num): Null {
    printf("\e[{color as Text}m%s\e[0m\n", [message])
}

pub fun echo_info(message: Text): Null {
    printf("\e[1;3;97;44m %s \e[0m\n", [message])
}

pub fun echo_success(message: Text): Null {
    printf("\e[1;3;97;42m %s \e[0m\n", [message])
}

pub fun echo_warning(message: Text): Null {
    printf("\e[1;3;97;43m %s \e[0m\n", [message])
}

pub fun error(message: Text, exit_code: Num = 1): Null {
    printf("\e[1;3;97;41m %s \e[0m\n", [message])
    if exit_code > 0 : exit(exit_code)
}




